// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  male
  female
  custom
}

enum Audinece {
  public
  friends
  custom
}

enum MediaType {
  image
  video
}

enum MessageMediaType {
  image
  video
  document
}

enum SuperAudinece {
  friendsExcept
  specificFriends
  customList
}

enum PostType {
  userpost
  grouppost
  pagepost
  usersharepost
  pagesharepost
  usersharetogrouppost
  pagesharetogrouppost
}

enum ShareType {
  userpost
  grouppost
  pagepost
  userpostmedia
  grouppostmedia
  pagepostmedia
}

enum ReactionType {
  like
  love
  sad
  angry
  care
  haha
  wow
}

/**
 * Entities
 */

/**
 * user related data
 */

model User {
  id                  String   @id @default(uuid())
  firstName           String
  lastName            String
  birthDate           DateTime
  gender              Gender
  customGender        String?
  customGenderPronoun String?
  email               String?  @unique
  phoneNumber         String?  @unique
  password            String

  verificationCode      Int?
  verificationExpiredAt DateTime?
  isActive              Boolean   @default(false)
  activeAt              DateTime?

  // friends
  friends Firends[]

  setFriendRequests      FriendRequest[] @relation("friendrequestsender")
  recievedFriendRequests FriendRequest[] @relation("friendrequestreciever")

  //groups
  memberedGroups     GroupMembers[]
  groupPosts         GroupPost[]
  sharedPostsToGroup ToGroupSharePost[]
  superAdminTo       Group?
  adminTo            GroupAdmin[]
  moderatorTo        GroupModerator[]

  taggedPosts   Tags[]
  //pages
  followedPages PageFollowers[]
  managedPages  Page[]          @relation("managedpages")
  //post
  ownPosts      UserPost[]      @relation("userposts")

  //shares
  sharedPosts              UserSharePost[]
  sentMessages             Message_USER[]  @relation("messagesender")
  recievedMessages         Message_USER[]  @relation("messagereciever")
  // messages
  sentMessagesToPage       Message_PAGE[]  @relation("sentmessagesToPage")
  recievedMessagesFromPage Message_PAGE[]  @relation("recievedmessagesFormPage")

  //story
  stories                 Story[]
  // profile
  Profile                 Profile?
  //feeds
  comments                FeedComment[]
  reactions               FeedReaction[]
  replyReactions          FeedReplyReactions[]
  FeedReplyReplyReactions FeedReplyReplyReactions[]
  replies                 FeedReply[]
  replyReplies            FeedReplyReply[]
  commentReactions        FeedCommentReaction[]

  // medias

  MediaReplyReplyReactions MediaReplyReplyReactions[]

  MediaReplyReply MediaReplyReply[]

  MediaReplyReactions MediaReplyReactions[]

  MediaCommentReaction MediaCommentReaction[]

  MediaReply MediaReply[]

  MediaReaction MediaReaction[]

  MediaComment MediaComment[]

  // reels

  reels Reel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserPost {
  id            String             @id @default(uuid())
  userId        String
  user          User               @relation("userposts", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  content       String?
  tags          Tags[]
  location      String?
  doing         String?
  doingWhat     String?
  medias        Media[]
  audience      Audinece           @default(friends)
  feeds         Feed[]
  sharesByUser  UserSharePost[]
  sharesByPage  PageSharePost[]
  sharesToGroup ToGroupSharePost[]
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
}

model UserSharePost {
  id          String     @id @default(uuid())
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tags        Tags[]
  shareWhat   ShareType
  content     String
  doing       String
  doingWhat   String
  audience    Audinece   @default(friends)
  userId      String
  location    String
  userPostId  String?
  pagePostId  String?
  groupPostId String?
  mediaId     String?
  media       Media?     @relation(fields: [mediaId], references: [id])
  userPost    UserPost?  @relation(fields: [userPostId], references: [id])
  pagePost    PagePost?  @relation(fields: [pagePostId], references: [id])
  groupPost   GroupPost? @relation(fields: [groupPostId], references: [id])
  feeds       Feed[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tags {
  id              String         @id @default(uuid())
  userPostId      String?
  userSharePostId String?
  userId          String
  userPost        UserPost?      @relation(fields: [userPostId], references: [id])
  userSharePost   UserSharePost? @relation(fields: [userSharePostId], references: [id])
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model Firends {
  id        String   @id @default(uuid())
  userId    String
  friend    User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FriendRequest {
  id         String   @id @default(uuid())
  sendId     String
  recieverId String
  sender     User     @relation("friendrequestsender", fields: [sendId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  reciever   User     @relation("friendrequestreciever", fields: [recieverId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

/**
 * User profile
 */

model Profile {
  id                 String             @id @default(uuid())
  userId             String             @unique
  user               User               @relation(fields: [userId], references: [id])
  homeTown           String?
  currentCity        String?
  previousCity       PreviousCity?
  bio                String?
  relationShipStatus String?
  nickName           String?
  aboutYou           String?
  favoriteQuotes     String?
  profilePicture     String?
  coverPhoto         String?
  avatar             String?
  socialLink         SocialLinks_USER[]
  website            Websites_USER[]
  work               Works_USER[]
  school             Schools_USER[]
  college            Collges_USER[]
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

model PreviousCity {
  id        String   @id @default(uuid())
  dateYear  String
  dateMonth String
  Profile   Profile  @relation(fields: [profileId], references: [id])
  profileId String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SocialLinks_USER {
  id        String   @id @default(uuid())
  userName  String
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Profile   Profile  @relation(fields: [profileId], references: [id])
  profileId String
}

model Collges_USER {
  id             String          @id @default(uuid())
  schoolName     String
  from           DateTime
  to             DateTime
  description    String
  concentrations Concentraions[]
  attendedFor    String
  graduated      Boolean
  Profile        Profile         @relation(fields: [profileId], references: [id])
  profileId      String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Concentraions {
  id              String       @id @default(uuid())
  concentration   String
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  CollgeProfile   Collges_USER @relation(fields: [collgeProfileId], references: [id])
  collgeProfileId String
}

model Websites_USER {
  id String @id @default(uuid())

  Profile   Profile  @relation(fields: [profileId], references: [id])
  profileId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Schools_USER {
  id         String   @id @default(uuid())
  schoolName String
  from       DateTime
  to         DateTime
  graduated  Boolean
  Profile    Profile  @relation(fields: [profileId], references: [id])
  profileId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Works_USER {
  id               String    @id @default(uuid())
  company          String
  city             String
  town             String
  description      String
  position         String
  from             DateTime
  to               DateTime?
  currentlyWorking Boolean?
  Profile          Profile   @relation(fields: [profileId], references: [id])
  profileId        String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

/**
 * group related relations
 */

model Group {
  id         String @id @default(uuid())
  userId     String @unique
  superAdmin User   @relation(fields: [userId], references: [id])

  name       String
  category   String?
  members    GroupMembers[]
  posts      GroupPost[]
  rules      GroupRules[]
  moderators GroupModerator[]
  admins     GroupAdmin[]
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
}

model GroupPost {
  id        String   @id @default(uuid())
  postType  PostType @default(grouppost)
  userId    String
  groupId   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  content   String
  location  String
  doing     String
  doingWhat String
  medias    Media[]
  feeds     Feed[]

  sharesByUser  UserSharePost[]
  sharesByPage  PageSharePost[]
  sharesToGroup ToGroupSharePost[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ToGroupSharePost {
  id        String    @id @default(uuid())
  postType  PostType  @default(pagesharetogrouppost)
  shareType ShareType
  userId    String?
  pageId    String?
  page      Page?     @relation(fields: [pageId], references: [id])
  user      User?     @relation(fields: [userId], references: [id])

  sharingWhat PostType @default(pagesharepost)
  content     String?
  doing       String?
  doingWhat   String?
  location    String?
  userPostId  String?
  pagePostId  String?
  groupPostId String?
  mediaId     String?
  media       Media?   @relation(fields: [mediaId], references: [id])

  userPost  UserPost?  @relation(fields: [userPostId], references: [id])
  pagePost  PagePost?  @relation(fields: [pagePostId], references: [id])
  groupPost GroupPost? @relation(fields: [groupPostId], references: [id])
  feeds     Feed[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model GroupRules {
  id        String   @id @default(uuid())
  groupId   String
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GroupAdmin {
  id        String   @id @default(uuid())
  groupId   String
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  group     Group    @relation(fields: [groupId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GroupModerator {
  id        String   @id @default(uuid())
  groupId   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  group     Group    @relation(fields: [groupId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GroupMembers {
  id        String   @id @default(uuid())
  userId    String
  groupId   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/**
 * Page related data
 */
model Page {
  id                 String             @id @default(uuid())
  name               String
  category           String
  userId             String
  admin              User               @relation("managedpages", fields: [userId], references: [id], onUpdate: Cascade)
  stories            Story[]
  posts              PagePost[]
  sharedPosts        PageSharePost[]
  sharedPostsToGroup ToGroupSharePost[]
  following          PageFollowers[]    @relation("followingpage")
  followedBy         PageFollowers[]    @relation("followerpage")
  sentMessages       Message_PAGE[]     @relation("sentmessages")
  recievedMessages   Message_PAGE[]     @relation("recievedmessages")
  reels              Reel[]
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

model PagePost {
  id            String             @id @default(uuid())
  postType      PostType           @default(pagepost)
  pageId        String
  page          Page               @relation(fields: [pageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  content       String
  location      String
  medias        Media[]
  feeds         Feed[]
  sharesByUser  UserSharePost[]
  sharesByPage  PageSharePost[]
  sharesToGroup ToGroupSharePost[]
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
}

model PageSharePost {
  id     String @id @default(uuid())
  pageId String
  page   Page   @relation(fields: [pageId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  sharingWhat PostType   @default(pagesharepost)
  content     String
  doing       String
  doingWhat   String
  audience    Audinece   @default(friends)
  location    String
  userPostId  String?
  pagePostId  String?
  groupPostId String?
  mediaId     String?
  media       Media?     @relation(fields: [mediaId], references: [id])
  userPost    UserPost?  @relation(fields: [userPostId], references: [id])
  pagePost    PagePost?  @relation(fields: [pagePostId], references: [id])
  groupPost   GroupPost? @relation(fields: [groupPostId], references: [id])
  feeds       Feed[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model PageFollowers {
  id              String   @id @default(uuid())
  followerUserId  String?
  followerPageId  String?
  followingPageId String?
  followerUser    User?    @relation(fields: [followerUserId], references: [id])
  followerPage    Page?    @relation("followerpage", fields: [followerPageId], references: [id])
  following       Page?    @relation("followingpage", fields: [followingPageId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([followerUserId, followerPageId])
}

/**
 * Feed media
 */

model Media {
  id          String  @id @default(uuid())
  userPostId  String?
  pagePostId  String?
  groupPostId String?
  mediaId     String?

  userPost      UserPost?          @relation(fields: [userPostId], references: [id])
  pagePost      PagePost?          @relation(fields: [pagePostId], references: [id])
  groupPost     GroupPost?         @relation(fields: [groupPostId], references: [id])
  url           String
  type          MediaType
  sharesByUser  UserSharePost[]
  sharesByPage  PageSharePost[]
  sharesToGroup ToGroupSharePost[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  MediaReaction MediaReaction[]

  MediaComment MediaComment[]
}

/**
 * message user
 */

model Message_USER {
  id            String               @id @default(uuid())
  senderId      String
  recieverId    String
  sender        User                 @relation("messagesender", fields: [senderId], references: [id], onUpdate: Cascade)
  reciever      User                 @relation("messagereciever", fields: [recieverId], references: [id], onUpdate: Cascade)
  seen          Boolean              @default(false)
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  MessageMedias MessageMedias_USER[]
}

model MessageMedias_USER {
  id        String           @id @default(uuid())
  messageId String
  Message   Message_USER     @relation(fields: [messageId], references: [id])
  type      MessageMediaType
  url       String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

/**
 * message page
 */

model Message_PAGE {
  id              String  @id @default(uuid())
  senderId        String?
  recieverId      String?
  senderId_page   String?
  recieverId_page String?

  sender_page   Page?                @relation("sentmessages", fields: [senderId_page], references: [id], onUpdate: Cascade)
  reciever_page Page?                @relation("recievedmessages", fields: [recieverId_page], references: [id], onUpdate: Cascade)
  sender        User?                @relation("sentmessagesToPage", fields: [senderId], references: [id], onUpdate: Cascade)
  reciever      User?                @relation("recievedmessagesFormPage", fields: [recieverId], references: [id], onUpdate: Cascade)
  seen          Boolean              @default(false)
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  MessageMedias MessageMedias_PAGE[]
}

model MessageMedias_PAGE {
  id        String           @id @default(uuid())
  messageId String
  message   Message_PAGE     @relation(fields: [messageId], references: [id])
  type      MessageMediaType
  url       String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

/**
 * story
 */

model Story {
  id        String       @id @default(uuid())
  userId    String?
  pageId    String?
  page      Page?        @relation(fields: [pageId], references: [id])
  user      User?        @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  medias    StoryMedia[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model StoryMedia {
  id        String   @id @default(uuid())
  storyId   String
  story     Story    @relation(fields: [storyId], references: [id])
  owner     String
  type      String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/**
 * Feed
 */

model Feed {
  id                 String            @id @default(uuid())
  postType           PostType
  userPostId         String?
  pagePostId         String?
  groupPostId        String?
  userSharePostId    String?
  pageSharePostId    String?
  toGroupSharePostId String?
  userPost           UserPost?         @relation(fields: [userPostId], references: [id])
  pagePost           PagePost?         @relation(fields: [pagePostId], references: [id])
  groupPost          GroupPost?        @relation(fields: [groupPostId], references: [id])
  userSharePost      UserSharePost?    @relation(fields: [userSharePostId], references: [id])
  pageSharePost      PageSharePost?    @relation(fields: [pageSharePostId], references: [id])
  toGroupSharePost   ToGroupSharePost? @relation(fields: [toGroupSharePostId], references: [id])
  comments           FeedComment[]
  reactions          FeedReaction[]
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
}

model FeedComment {
  id        String                @id @default(uuid())
  feedId    String
  feed      Feed                  @relation(fields: [feedId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  user      User                  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaUrl  String?
  content   String?
  reactions FeedCommentReaction[]
  replies   FeedReply[]
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
}

model FeedReaction {
  id     String @id @default(uuid())
  feedId String
  userId String
  feed   Feed   @relation(fields: [feedId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  reactionType ReactionType
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

/**
 * feed comment
 */

model FeedReply {
  id        String      @id @default(uuid())
  commentId String
  comment   FeedComment @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userId    String
  user      User                 @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaUrl  String
  content   String
  reactions FeedReplyReactions[]
  replies   FeedReplyReply[]
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
}

model FeedCommentReaction {
  id String @id @default(uuid())

  commentId String
  userId    String
  comment   FeedComment @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  reactionType ReactionType
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

/**
 * feed reply *
 */

model FeedReplyReactions {
  id           String       @id @default(uuid())
  replyId      String
  reply        FeedReply    @relation(fields: [replyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reactionType ReactionType
  userId       String
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FeedReplyReply {
  id        String                    @id @default(uuid())
  replyId   String
  reply     FeedReply                 @relation(fields: [replyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  user      User                      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaUrl  String
  content   String
  reactions FeedReplyReplyReactions[]
  createdAt DateTime                  @default(now())
  updatedAt DateTime                  @updatedAt
}

model FeedReplyReplyReactions {
  id           String         @id @default(uuid())
  replyReplyId String
  reply        FeedReplyReply @relation(fields: [replyReplyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reactionType ReactionType
  userId       String
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MediaComment {
  id       String  @id @default(uuid())
  mediaId  String
  media    Media   @relation(fields: [mediaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId   String
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaUrl String?
  content  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reactions MediaCommentReaction[]

  replies MediaReply[]
}

model MediaReaction {
  id      String @id @default(uuid())
  mediaId String
  userId  String
  Media   Media  @relation(fields: [mediaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  reactionType ReactionType
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

/**
 * feed comment
 */

model MediaReply {
  id        String       @id @default(uuid())
  commentId String
  comment   MediaComment @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaUrl  String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  replyReplies MediaReplyReply[]

  reactions MediaReplyReactions[]
}

model MediaCommentReaction {
  id String @id @default(uuid())

  commentId String
  userId    String
  comment   MediaComment @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  reactionType ReactionType
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

/**
 * feed reply *
 */

model MediaReplyReactions {
  id           String       @id @default(uuid())
  replyId      String
  reply        MediaReply   @relation(fields: [replyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reactionType ReactionType
  userId       String
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MediaReplyReply {
  id        String     @id @default(uuid())
  replyId   String
  reply     MediaReply @relation(fields: [replyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaUrl  String
  content   String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  reactions MediaReplyReplyReactions[]
}

model MediaReplyReplyReactions {
  id           String          @id @default(uuid())
  replyReplyId String
  reply        MediaReplyReply @relation(fields: [replyReplyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reactionType ReactionType
  userId       String
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reel {
  id        String   @id @default(uuid())
  userId    String?
  pageId    String?
  page      Page?    @relation(fields: [pageId], references: [id])
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  url       String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

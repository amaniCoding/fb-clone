// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  male
  female
  custom
}

enum Audinece {
  public
  friends
  custom
}

enum MediaType {
  image
  video
}

enum SuperAudinece {
  friendsExcept
  specificFriends
  customList
}

enum PostType {
  userpost
  grouppost
  pagepost
  usersharepost
  pagesharepost
  usersharetogrouppost
  pagesharetogrouppost
}

enum ShareType {
  userpost
  grouppost
  pagepost
  userpostmedia
  grouppostmedia
  pagepostmedia
}

enum ReactionType {
  like
  love
  sad
  angry
  care
  haha
  wow
}

model User {
  id                  String   @id @default(uuid())
  firstName           String
  lastName            String
  birthDate           DateTime
  gender              Gender
  customGender        String?
  customGenderPronoun String?
  email               String?  @unique
  phoneNumber         String?  @unique
  password            String

  verificationCode       Int?
  verificationExpiredAt  DateTime?
  isActive               Boolean         @default(false)
  activeAt               DateTime?
  friendsFromSent        Firends[]       @relation("sender")
  friendsFromRecieved    Firends[]       @relation("reciever")
  setFriendRequests      FriendRequest[] @relation("friendrequestsender")
  recievedFriendRequests FriendRequest[] @relation("friendrequestreciever")

  taggedPosts        Tags_USER[]
  fansOf             Page[]
  memberOf           GroupMembers[]
  managedPages       Page[]                   @relation("managedpages")
  managedGroups      Group[]
  ownPosts           Post_USER[]              @relation("userposts")
  groupPosts         Post_GROUP[]
  sharedPosts        Post_USERSHARE[]
  sharedPostsToGroup Post_USERSHARE_TOGROUP[]
  sentMessages       Message_USER[]           @relation("messagesender")
  recievedMessages   Message_USER[]           @relation("messagereciever")

  sentMessages_page     Message_PAGE[] @relation("messagesender_page")
  recievedMessages_page Message_PAGE[] @relation("messagereciever_page")
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  stories               Story_USER[]

  replies_user              Reply_USER[]
  replies_page              Reply_PAGE[]
  replies_group             Reply_GROUP[]
  replies_usershare         Reply_USERSHARE[]
  replies_pageshare         Reply_PAGESHARE[]
  replies_usershare_togroup Reply_USERSHARE_TOGROUP[]
  replies_pageshare_togroup Reply_PAGESHARE_TOGROUP[]

  comments_user              Comment_USER[]
  comments_page              Comment_PAGE[]
  comments_group             Comment_GROUP[]
  comments_usershare         Comment_USERSHARE[]
  comments_pageshare         Comment_PAGESHARE[]
  comments_usershare_togroup Comment_USERSHARE_TOGROUP[]
  comments_pageshare_togroup Comment_PAGESHARE_TOGROUP[]

  postReactions_user              PostReactions_USER[]
  postReactions_page              PostReactions_PAGE[]
  postReactions_group             PostReactions_GROUP[]
  postReactions_usershare         PostReactions_USERSHARE[]
  postReactions_pageshare         PostReactions_PAGESHARE[]
  postReactions_usershare_togroup PostReactions_USERSHARE_TOGROUP[]
  postReactions_pageshare_togroup PostReactions_PAGESHARE_TOGROUP[]

  commentReactions_user              CommentReactions_USER[]
  commentReactions_page              CommentReactions_PAGE[]
  commentReactions_group             CommentReactions_GROUP[]
  commentReactions_usershare         CommentReactions_USERSHARE[]
  commentReactions_pageshare         CommentReactions_PAGESHARE[]
  commentReactions_usershare_togroup CommentReaction_USERSHARE_TOGROUP[]
  commentReactions_pageshare_togroup CommentReaction_PAGESHARE_TOGROUP[]

  replyReactions_user              ReplyReactions_USER[]
  replyReactions_page              ReplyReactions_PAGE[]
  replyReactions_group             ReplyReactions_GROUP[]
  replyReactions_usershare         ReplyReactions_USERSHARE[]
  replyReactions_pageshare         ReplyReactions_PAGESHARE[]
  replyReactions_usershare_togroup ReplyReactions_USERSHARE_TOGROUP[]
  replyReactions_pageshare_togroup ReplyReactions_PAGESHARE_TOGROUP[]

  comments_media_user         Comment_USER_MEDIA[]
  replies_media_user          Reply_USER_MEDIA[]
  postReactions_media_user    PostReactions_USER_MEDIA[]
  commentReactions_media_user CommentReactions_USER_MEDIA[]
  replyReactions_media_user   ReplyReactions_USER_MEDIA[]

  comments_media_page         Comment_PAGE_MEDIA[]
  replies_media_page          Reply_PAGE_MEDIA[]
  postReactions_media_page    PostReactions_PAGE_MEDIA[]
  commentReactions_media_page CommentReactions_PAGE_MEDIA[]
  replyReactions_media_page   ReplyReactions_PAGE_MEDIA[]

  comments_media_group         Comment_GROUP_MEDIA[]
  replies_media_group          Reply_GROUP_MEDIA[]
  postReactions_media_group    PostReactions_GROUP_MEDIA[]
  commentReactions_media_group CommentReactions_GROUP_MEDIA[]
  replyReactions_media_group   ReplyReactions_GROUP_MEDIA[]

  postReactions_userreel PostReactions_USERREEL[]
  postReactions_pagereel PostReaction_PAGEREEL[]

  commentReactions_userreel CommentReaction_USERREEL[]
  commentReactions_pagereel CommentReaction_PAGEREEL[]

  replyReactions_userreel ReplyReactions_USERREEL[]
  replyReactions_pagereel ReplyReactions_PAGEREEL[]

  comments_userreel Comment_USERREEL[]
  comments_pagereel Comment_PAGEREEL[]

  replies_userreel Reply_USERREEL[]
  replies_pagereel Reply_PAGEREEL[]

  reels Reel_USER[]

  PostsMemberOfLists Post_USER[]
  adminTo            Profile_GROUP[] @relation("admins")
  moderatorTo        Profile_GROUP[] @relation("moderators")

  Profile Profile_USER?
}

model Firends {
  id         String   @id @default(uuid())
  senderId   String
  recieverId String
  sender     User     @relation("sender", fields: [senderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reciever   User     @relation("reciever", fields: [recieverId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model FriendRequest {
  id         String   @id @default(uuid())
  sendId     String
  recieverId String
  sender     User     @relation("friendrequestsender", fields: [sendId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  reciever   User     @relation("friendrequestreciever", fields: [recieverId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Medias_USER {
  id       String               @id @default(uuid())
  postId   String
  post     Post_USER            @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  url      String
  type     MediaType
  size     Int?
  width    Int?
  height   Int?
  comments Comment_USER_MEDIA[]

  sharesByUser        Post_USERSHARE[]
  sharesByPage        Post_PAGESHARE[]
  sharesByPageToGroup Post_PAGESHARE_TOGROUP[]
  sharesByUserToGroup Post_USERSHARE_TOGROUP[]
  reactions           PostReactions_USER_MEDIA[]
  createdAt           DateTime                   @default(now())
  updatedAt           DateTime                   @updatedAt
}

model MessageMedias_USER {
  id        String       @id @default(uuid())
  postId    String
  messageId String
  message   Message_USER @relation(fields: [messageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  url       String
  type      MediaType
  size      Int?
  width     Int?
  height    Int?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model MessageMedias_PAGE {
  id        String       @id @default(uuid())
  postId    String
  messageId String
  message   Message_PAGE @relation(fields: [messageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  url       String
  type      MediaType
  size      Int?
  width     Int?
  height    Int?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Medias_PAGE {
  id                  String                     @id @default(uuid())
  pagePostId          String
  pagePost            Post_PAGE                  @relation(fields: [pagePostId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  url                 String
  type                MediaType
  size                Int?
  width               Int?
  height              Int?
  comments            Comment_PAGE_MEDIA[]
  reactions           PostReactions_PAGE_MEDIA[]
  sharesByUser        Post_USERSHARE[]
  sharesByPage        Post_PAGESHARE[]
  sharesByPageToGroup Post_PAGESHARE_TOGROUP[]
  sharesByUserToGroup Post_USERSHARE_TOGROUP[]
  createdAt           DateTime                   @default(now())
  updatedAt           DateTime                   @updatedAt
}

model Medias_GROUP {
  id                  String                      @id @default(uuid())
  groupPostId         String
  groupPost           Post_GROUP                  @relation(fields: [groupPostId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  url                 String
  type                String
  size                Int?
  width               Int?
  height              Int?
  comments            Comment_GROUP_MEDIA[]
  reactions           PostReactions_GROUP_MEDIA[]
  sharesByUser        Post_USERSHARE[]
  sharesByPage        Post_PAGESHARE[]
  sharesByPageToGroup Post_PAGESHARE_TOGROUP[]
  sharesByUserToGroup Post_USERSHARE_TOGROUP[]
  createdAt           DateTime                    @default(now())
  updatedAt           DateTime                    @updatedAt
}

model Tags_USER {
  id        String    @id @default(uuid())
  postId    String
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  post      Post_USER @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Page {
  id                    String                   @id @default(uuid())
  name                  String
  category              String
  userId                String
  admin                 User                     @relation("managedpages", fields: [userId], references: [id], onUpdate: Cascade)
  fans                  User[]
  posts                 Post_PAGE[]
  sharedPosts           Post_PAGESHARE[]
  sharedPostsToGroup    Post_PAGESHARE_TOGROUP[]
  stories               Story_PAGE[]
  reels                 Reel_PAGE[]
  sentMessages_page     Message_PAGE[]           @relation("messagesender_page")
  recievedMessages_page Message_PAGE[]           @relation("messagereciever_page")
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @updatedAt
}

model Post_USER {
  id                   String                   @id @default(uuid())
  postType             PostType                 @default(userpost)
  userId               String
  user                 User                     @relation("userposts", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  content              String?
  medias               Medias_USER[]
  tags                 Tags_USER[]
  location             String?
  doing                String?
  doingWhat            String?
  audience             Audinece                 @default(friends)
  sAudience            SuperAudinece?
  sAudienceFriendLists User[]
  sharesByUser         Post_USERSHARE[]
  sharesByPage         Post_PAGESHARE[]
  sharesByPageToGroup  Post_USERSHARE_TOGROUP[]
  sharesByUserToGroup  Post_PAGESHARE_TOGROUP[]
  comments             Comment_USER[]
  createdAt            DateTime                 @default(now())
  updatedAt            DateTime                 @updatedAt

  reactions PostReactions_USER[]
}

model Post_PAGE {
  id                  String                   @id @default(uuid())
  postType            PostType                 @default(pagepost)
  pageId              String
  page                Page                     @relation(fields: [pageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  content             String
  medias              Medias_PAGE[]
  location            String
  doing               String
  doingWhat           String
  audience            Audinece                 @default(public)
  sharesByUser        Post_USERSHARE[]
  sharesByPage        Post_PAGESHARE[]
  sharesByPageToGroup Post_PAGESHARE_TOGROUP[]
  sharesByUserToGroup Post_USERSHARE_TOGROUP[]
  comments            Comment_PAGE[]
  reactions           PostReactions_PAGE[]
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt
}

model Post_GROUP {
  id                  String                   @id @default(uuid())
  postType            PostType                 @default(grouppost)
  userId              String
  groupId             String
  user                User                     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  group               Group                    @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  content             String
  medias              Medias_GROUP[]
  location            String
  doing               String
  doingWhat           String
  audience            Audinece                 @default(friends)
  sAudience           SuperAudinece?
  sharesByUser        Post_USERSHARE[]
  sharesByPage        Post_PAGESHARE[]
  sharesByPageToGroup Post_PAGESHARE_TOGROUP[]
  sharesByUserToGroup Post_USERSHARE_TOGROUP[]
  comments            Comment_GROUP[]
  reactions           PostReactions_GROUP[]
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt
}

model Group {
  id                           String                   @id @default(uuid())
  userId                       String
  admin                        User                     @relation(fields: [userId], references: [id], onUpdate: Cascade)
  name                         String
  category                     String
  members                      GroupMembers[]
  groupMembersId               String
  posts                        Post_GROUP[]
  sharedPostsToThisGroupByUser Post_USERSHARE_TOGROUP[]
  sharedPostsToThisGroupByPage Post_PAGESHARE_TOGROUP[]
  createdAt                    DateTime                 @default(now())
  updatedAt                    DateTime                 @updatedAt
}

model GroupMembers {
  id        String   @id @default(uuid())
  userId    String
  groupId   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post_USERSHARE {
  id           String         @id @default(uuid())
  postType     PostType       @default(usersharepost)
  shareType    ShareType
  content      String
  doing        String
  doingWhat    String
  audience     Audinece       @default(friends)
  cAudience    SuperAudinece?
  userId       String
  location     String
  userPostId   String?
  pagePostId   String?
  groupPostId  String?
  userMediaId  String?
  pageMediaId  String?
  groupMediaId String?
  userMedia    Medias_USER?   @relation(fields: [userMediaId], references: [id])
  pageMedia    Medias_PAGE?   @relation(fields: [pageMediaId], references: [id])
  groupMedia   Medias_GROUP?  @relation(fields: [groupMediaId], references: [id])
  sharingType  String
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userPost     Post_USER?     @relation(fields: [userPostId], references: [id])
  pagePost     Post_PAGE?     @relation(fields: [pagePostId], references: [id])
  groupPost    Post_GROUP?    @relation(fields: [groupPostId], references: [id])

  comments  Comment_USERSHARE[]
  reactions PostReactions_USERSHARE[]
  createdAt DateTime                  @default(now())
  updatedAt DateTime                  @updatedAt
}

model Post_PAGESHARE {
  id        String    @id @default(uuid())
  postType  PostType  @default(pagesharepost)
  shareType ShareType

  content      String
  doing        String
  doingWhat    String
  audience     Audinece                  @default(friends)
  cAudience    SuperAudinece?
  pageId       String
  location     String
  userPostId   String?
  pagePostId   String?
  groupPostId  String?
  userMediaId  String?
  pageMediaId  String?
  groupMediaId String?
  userMedia    Medias_USER?              @relation(fields: [userMediaId], references: [id])
  pageMedia    Medias_PAGE?              @relation(fields: [pageMediaId], references: [id])
  groupMedia   Medias_GROUP?             @relation(fields: [groupMediaId], references: [id])
  sharingType  String
  page         Page                      @relation(fields: [pageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userPost     Post_USER?                @relation(fields: [userPostId], references: [id])
  pagePost     Post_PAGE?                @relation(fields: [pagePostId], references: [id])
  groupPost    Post_GROUP?               @relation(fields: [groupPostId], references: [id])
  comments     Comment_PAGESHARE[]
  reactions    PostReactions_PAGESHARE[]
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
}

model Post_PAGESHARE_TOGROUP {
  id        String    @id @default(uuid())
  postType  PostType  @default(pagesharetogrouppost)
  shareType ShareType

  content      String
  doing        String
  doingWhat    String
  audience     Audinece       @default(friends)
  cAudience    SuperAudinece?
  pageId       String
  location     String
  userPostId   String?
  pagePostId   String?
  groupPostId  String?
  userMediaId  String?
  pageMediaId  String?
  groupMediaId String?
  userMedia    Medias_USER?   @relation(fields: [userMediaId], references: [id])
  pageMedia    Medias_PAGE?   @relation(fields: [pageMediaId], references: [id])
  groupMedia   Medias_GROUP?  @relation(fields: [groupMediaId], references: [id])
  sharingType  String
  groupId      String
  page         Page           @relation(fields: [pageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  toWhichGroup Group          @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userPost  Post_USER?                        @relation(fields: [userPostId], references: [id])
  pagePost  Post_PAGE?                        @relation(fields: [pagePostId], references: [id])
  groupPost Post_GROUP?                       @relation(fields: [groupPostId], references: [id])
  comments  Comment_PAGESHARE_TOGROUP[]
  reactions PostReactions_PAGESHARE_TOGROUP[]
  createdAt DateTime                          @default(now())
  updatedAt DateTime                          @updatedAt
}

model Post_USERSHARE_TOGROUP {
  id        String    @id @default(uuid())
  postType  PostType  @default(usersharetogrouppost)
  shareType ShareType

  content      String
  doing        String
  doingWhat    String
  audience     Audinece                          @default(friends)
  cAudience    SuperAudinece?
  userId       String
  groupId      String
  location     String
  userPostId   String?
  pagePostId   String?
  groupPostId  String?
  userMediaId  String?
  pageMediaId  String?
  groupMediaId String?
  userMedia    Medias_USER?                      @relation(fields: [userMediaId], references: [id])
  pageMedia    Medias_PAGE?                      @relation(fields: [pageMediaId], references: [id])
  groupMedia   Medias_GROUP?                     @relation(fields: [groupMediaId], references: [id])
  sharingType  String
  sharer       User                              @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  toWhichGroup Group                             @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userPost     Post_USER?                        @relation(fields: [userPostId], references: [id])
  pagePost     Post_PAGE?                        @relation(fields: [pagePostId], references: [id])
  groupPost    Post_GROUP?                       @relation(fields: [groupPostId], references: [id])
  comments     Comment_USERSHARE_TOGROUP[]
  reactions    PostReactions_USERSHARE_TOGROUP[]
  createdAt    DateTime                          @default(now())
  updatedAt    DateTime                          @updatedAt
}

model Message_USER {
  id            String               @id @default(uuid())
  senderId      String
  recieverId    String
  sender        User                 @relation("messagesender", fields: [senderId], references: [id], onUpdate: Cascade)
  reciever      User                 @relation("messagereciever", fields: [recieverId], references: [id], onUpdate: Cascade)
  seen          Boolean              @default(false)
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  MessageMedias MessageMedias_USER[]
}

model Message_PAGE {
  id              String  @id @default(uuid())
  senderId        String?
  recieverId      String?
  senderId_page   String?
  recieverId_page String?

  sender_page   Page?                @relation("messagesender_page", fields: [senderId_page], references: [id], onUpdate: Cascade)
  reciever_page Page?                @relation("messagereciever_page", fields: [recieverId_page], references: [id], onUpdate: Cascade)
  sender        User?                @relation("messagesender_page", fields: [senderId], references: [id], onUpdate: Cascade)
  reciever      User?                @relation("messagereciever_page", fields: [recieverId], references: [id], onUpdate: Cascade)
  seen          Boolean              @default(false)
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  MessageMedias MessageMedias_PAGE[]
}

model StoryMedia_USER {
  id        String     @id @default(uuid())
  storyId   String
  story     Story_USER @relation(fields: [storyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  type      String
  url       String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Story_USER {
  id        String            @id @default(uuid())
  userId    String
  user      User              @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  medias    StoryMedia_USER[]
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model StoryMedia_PAGE {
  id          String     @id @default(uuid())
  type        String
  url         String
  pageStoryId String
  story       Story_PAGE @relation(fields: [pageStoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Story_PAGE {
  id        String            @id @default(uuid())
  pageId    String
  page      Page              @relation(fields: [pageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  medias    StoryMedia_PAGE[]
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model Reply_USER {
  id        String       @id @default(uuid())
  commentId String
  comment   Comment_USER @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userId    String
  user      User                  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaUrl  String
  content   String
  reactions ReplyReactions_USER[]
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
}

model Reply_PAGE {
  id        String       @id @default(uuid())
  commentId String
  comment   Comment_PAGE @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userId    String
  user      User                  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaUrl  String
  content   String
  reactions ReplyReactions_PAGE[]
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
}

model Reply_GROUP {
  id        String        @id @default(uuid())
  commentId String
  comment   Comment_GROUP @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userId    String
  user      User                   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaUrl  String
  content   String
  reactions ReplyReactions_GROUP[]
  createdAt DateTime               @default(now())
  updatedAt DateTime               @updatedAt
}

model Reply_USERSHARE {
  id        String            @id @default(uuid())
  commentId String
  comment   Comment_USERSHARE @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userId    String
  user      User                       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaUrl  String
  content   String
  reactions ReplyReactions_USERSHARE[]
  createdAt DateTime                   @default(now())
  updatedAt DateTime                   @updatedAt
}

model Reply_PAGESHARE {
  id        String            @id @default(uuid())
  commentId String
  comment   Comment_PAGESHARE @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userId    String
  user      User                       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaUrl  String
  content   String
  reactions ReplyReactions_PAGESHARE[]
  createdAt DateTime                   @default(now())
  updatedAt DateTime                   @updatedAt
}

model Reply_USERSHARE_TOGROUP {
  id        String                    @id @default(uuid())
  commentId String
  comment   Comment_USERSHARE_TOGROUP @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userId    String
  user      User                               @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaUrl  String
  content   String
  reactions ReplyReactions_USERSHARE_TOGROUP[]
  createdAt DateTime                           @default(now())
  updatedAt DateTime                           @updatedAt
}

model Reply_PAGESHARE_TOGROUP {
  id        String                    @id @default(uuid())
  commentId String
  comment   Comment_PAGESHARE_TOGROUP @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userId    String
  user      User                               @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaUrl  String
  content   String
  reactions ReplyReactions_PAGESHARE_TOGROUP[]
  createdAt DateTime                           @default(now())
  updatedAt DateTime                           @updatedAt
}

model Comment_USER {
  id        String                  @id @default(uuid())
  postId    String
  userId    String
  user      User                    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  post      Post_USER               @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaUrl  String?
  content   String?
  replies   Reply_USER[]
  reactions CommentReactions_USER[]
  createdAt DateTime                @default(now())
  updatedAt DateTime                @updatedAt
}

model Comment_PAGE {
  id        String                  @id @default(uuid())
  postId    String
  userId    String
  user      User                    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  post      Post_PAGE               @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaUrl  String?
  content   String?
  replies   Reply_PAGE[]
  reactions CommentReactions_PAGE[]
  createdAt DateTime                @default(now())
  updatedAt DateTime                @updatedAt
}

model Comment_GROUP {
  id        String                   @id @default(uuid())
  postId    String
  userId    String
  user      User                     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  post      Post_GROUP               @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaUrl  String?
  content   String?
  replies   Reply_GROUP[]
  reactions CommentReactions_GROUP[]
  createdAt DateTime                 @default(now())
  updatedAt DateTime                 @updatedAt
}

model Comment_USERSHARE {
  id        String                       @id @default(uuid())
  postId    String
  userId    String
  user      User                         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  post      Post_USERSHARE               @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaUrl  String?
  content   String?
  replies   Reply_USERSHARE[]
  reactions CommentReactions_USERSHARE[]
  createdAt DateTime                     @default(now())
  updatedAt DateTime                     @updatedAt
}

model Comment_PAGESHARE {
  id        String                       @id @default(uuid())
  postId    String
  userId    String
  user      User                         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  post      Post_PAGESHARE               @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaUrl  String?
  content   String?
  replies   Reply_PAGESHARE[]
  reactions CommentReactions_PAGESHARE[]
  createdAt DateTime                     @default(now())
  updatedAt DateTime                     @updatedAt
}

model Comment_USERSHARE_TOGROUP {
  id        String                              @id @default(uuid())
  postId    String
  userId    String
  user      User                                @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  post      Post_USERSHARE_TOGROUP              @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaUrl  String?
  content   String?
  replies   Reply_USERSHARE_TOGROUP[]
  reactions CommentReaction_USERSHARE_TOGROUP[]
  createdAt DateTime                            @default(now())
  updatedAt DateTime                            @updatedAt
}

model Comment_PAGESHARE_TOGROUP {
  id        String                              @id @default(uuid())
  postId    String
  userId    String
  user      User                                @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  post      Post_PAGESHARE_TOGROUP              @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaUrl  String?
  content   String?
  replies   Reply_PAGESHARE_TOGROUP[]
  reactions CommentReaction_PAGESHARE_TOGROUP[]
  createdAt DateTime                            @default(now())
  updatedAt DateTime                            @updatedAt
}

/**
 * comment reactions *
 */

model CommentReactions_USER {
  id           String       @id @default(uuid())
  commentId    String
  reactionType ReactionType
  userId       String
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  comment      Comment_USER @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model CommentReactions_PAGE {
  id           String       @id @default(uuid())
  commentId    String
  reactionType ReactionType
  userId       String
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  comment      Comment_PAGE @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model CommentReactions_GROUP {
  id           String        @id @default(uuid())
  commentId    String
  reactionType ReactionType
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  comment      Comment_GROUP @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model CommentReactions_USERSHARE {
  id           String            @id @default(uuid())
  commentId    String
  reactionType ReactionType
  userId       String
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  comment      Comment_USERSHARE @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
}

model CommentReactions_PAGESHARE {
  id           String            @id @default(uuid())
  commentId    String
  reactionType ReactionType
  userId       String
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  comment      Comment_PAGESHARE @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
}

model CommentReaction_USERSHARE_TOGROUP {
  id           String                    @id @default(uuid())
  commentId    String
  reactionType ReactionType
  userId       String
  user         User                      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  comment      Comment_USERSHARE_TOGROUP @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CommentReaction_PAGESHARE_TOGROUP {
  id           String                    @id @default(uuid())
  commentId    String
  reactionType ReactionType
  userId       String
  user         User                      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  comment      Comment_PAGESHARE_TOGROUP @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
}

/**
 * reply reactions
 */

model ReplyReactions_USER {
  id           String       @id @default(uuid())
  replyId      String
  reply        Reply_USER   @relation(fields: [replyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reactionType ReactionType
  userId       String
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ReplyReactions_PAGE {
  id           String       @id @default(uuid())
  replyId      String
  reply        Reply_PAGE   @relation(fields: [replyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reactionType ReactionType
  userId       String
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ReplyReactions_GROUP {
  id      String      @id @default(uuid())
  replyId String
  reply   Reply_GROUP @relation(fields: [replyId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  reactionType ReactionType
  userId       String
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ReplyReactions_USERSHARE {
  id           String          @id @default(uuid())
  replyId      String
  reply        Reply_USERSHARE @relation(fields: [replyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reactionType ReactionType
  userId       String
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ReplyReactions_PAGESHARE {
  id           String          @id @default(uuid())
  replyId      String
  reply        Reply_PAGESHARE @relation(fields: [replyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reactionType ReactionType
  userId       String
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ReplyReactions_USERSHARE_TOGROUP {
  id           String                  @id @default(uuid())
  replyId      String
  reply        Reply_USERSHARE_TOGROUP @relation(fields: [replyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reactionType ReactionType
  userId       String
  user         User                    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @updatedAt
}

model ReplyReactions_PAGESHARE_TOGROUP {
  id           String                  @id @default(uuid())
  replyId      String
  reply        Reply_PAGESHARE_TOGROUP @relation(fields: [replyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reactionType ReactionType
  userId       String
  user         User                    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @updatedAt
}

model PostReactions_USER {
  id           String       @id @default(uuid())
  postId       String
  reactionType ReactionType
  userId       String
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  post         Post_USER    @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model PostReactions_PAGE {
  id     String    @id @default(uuid())
  postId String
  post   Post_PAGE @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  reactionType ReactionType
  userId       String
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PostReactions_GROUP {
  id     String     @id @default(uuid())
  postId String
  post   Post_GROUP @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  reactionType ReactionType
  userId       String
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PostReactions_USERSHARE {
  id     String         @id @default(uuid())
  postId String
  post   Post_USERSHARE @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  reactionType ReactionType
  userId       String
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PostReactions_PAGESHARE {
  id     String         @id @default(uuid())
  postId String
  post   Post_PAGESHARE @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  reactionType ReactionType
  userId       String
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PostReactions_USERSHARE_TOGROUP {
  id     String                 @id @default(uuid())
  postId String
  post   Post_USERSHARE_TOGROUP @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  reactionType ReactionType
  userId       String
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PostReactions_PAGESHARE_TOGROUP {
  id     String                 @id @default(uuid())
  postId String
  post   Post_PAGESHARE_TOGROUP @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  reactionType ReactionType
  userId       String
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile_PAGE {
  id             String             @id @default(uuid())
  pageId         String             @unique
  profilePicture String?
  coverPhoto     String?
  avatar         String?
  about          String?
  websites       Websites_PAGE[]
  socialLinks    SocialLinks_PAGE[]
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
}

model Profile_GROUP {
  id             String              @id @default(uuid())
  pageId         String              @unique
  profilePicture String?
  coverPhoto     String?
  avatar         String?
  about          String?
  websites       Websites_GROUP[]
  socialLinks    SocialLinks_GROUP[]
  rules          GroupRules[]
  admins         User[]              @relation("admins")
  moderators     User[]              @relation("moderators")
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
}

model SocialLinks_GROUP {
  id        String        @id @default(uuid())
  userName  String
  type      String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  Profile   Profile_GROUP @relation(fields: [profileId], references: [id])
  profileId String
}

model Websites_GROUP {
  id String @id @default(uuid())

  Profile   Profile_GROUP @relation(fields: [profileId], references: [id])
  profileId String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model GroupRules {
  id String @id @default(uuid())

  Profile   Profile_GROUP @relation(fields: [profileId], references: [id])
  profileId String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model SocialLinks_PAGE {
  id        String       @id @default(uuid())
  userName  String
  type      String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  Profile   Profile_PAGE @relation(fields: [profileId], references: [id])
  profileId String
}

model Websites_PAGE {
  id String @id @default(uuid())

  Profile   Profile_PAGE @relation(fields: [profileId], references: [id])
  profileId String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Profile_USER {
  id                 String             @id @default(uuid())
  userId             String             @unique
  user               User               @relation(fields: [userId], references: [id])
  homeTown           String?
  currentCity        String?
  previousCity       PreviousCity?
  bio                String?
  relationShipStatus String?
  nickName           String?
  aboutYou           String?
  favoriteQuotes     String?
  profilePicture     String?
  coverPhoto         String?
  avatar             String?
  socialLink         SocialLinks_USER[]
  website            Websites_USER[]
  work               Works_USER[]
  school             Schools_USER[]
  college            Collges_USER[]
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

model PreviousCity {
  id        String       @id @default(uuid())
  dateYear  String
  dateMonth String
  Profile   Profile_USER @relation(fields: [profileId], references: [id])
  profileId String       @unique
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model SocialLinks_USER {
  id        String       @id @default(uuid())
  userName  String
  type      String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  Profile   Profile_USER @relation(fields: [profileId], references: [id])
  profileId String
}

model Collges_USER {
  id             String          @id @default(uuid())
  schoolName     String
  from           DateTime
  to             DateTime
  description    String
  concentrations Concentraions[]
  attendedFor    String
  graduated      Boolean
  Profile        Profile_USER    @relation(fields: [profileId], references: [id])
  profileId      String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Concentraions {
  id              String       @id @default(uuid())
  concentration   String
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  CollgeProfile   Collges_USER @relation(fields: [collgeProfileId], references: [id])
  collgeProfileId String
}

model Websites_USER {
  id String @id @default(uuid())

  Profile   Profile_USER @relation(fields: [profileId], references: [id])
  profileId String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Schools_USER {
  id         String       @id @default(uuid())
  schoolName String
  from       DateTime
  to         DateTime
  graduated  Boolean
  Profile    Profile_USER @relation(fields: [profileId], references: [id])
  profileId  String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model Works_USER {
  id               String       @id @default(uuid())
  company          String
  city             String
  town             String
  description      String
  position         String
  from             DateTime
  to               DateTime?
  currentlyWorking Boolean?
  Profile          Profile_USER @relation(fields: [profileId], references: [id])
  profileId        String
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

model Reel_USER {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  url       String
  content   String
  profileId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  comments Comment_USERREEL[]

  reactions PostReactions_USERREEL[]
}

/**
 * for user reel
 * reactions
 * comments
 * replies
 */

model PostReactions_USERREEL {
  id           String       @id @default(uuid())
  reelId       String
  reactionType ReactionType
  userId       String
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reel         Reel_USER    @relation(fields: [reelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaUrl     String
  content      String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Comment_USERREEL {
  id        String                     @id @default(uuid())
  reelId    String
  userId    String
  user      User                       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reel      Reel_USER                  @relation(fields: [reelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaUrl  String
  content   String
  createdAt DateTime                   @default(now())
  updatedAt DateTime                   @updatedAt
  reactions CommentReaction_USERREEL[]
  replies   Reply_USERREEL[]
}

/**
 * for a comment
 * reaction
 * reply
 */

model CommentReaction_USERREEL {
  id           String           @id @default(uuid())
  commentId    String
  reactionType ReactionType
  userId       String
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  comment      Comment_USERREEL @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model Reply_USERREEL {
  id           String                    @id @default(uuid())
  commentId    String
  reactionType ReactionType
  userId       String
  user         User                      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  comment      Comment_USERREEL          @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaUrl     String
  content      String
  reactions    ReplyReactions_USERREEL[]
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
}

//for a reply

model ReplyReactions_USERREEL {
  id           String         @id @default(uuid())
  replyId      String
  reactionType ReactionType
  userId       String
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reply        Reply_USERREEL @relation(fields: [replyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Reel_PAGE {
  id        String   @id @default(uuid())
  pageId    String
  page      Page     @relation(fields: [pageId], references: [id])
  url       String
  content   String
  profileId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  comments Comment_PAGEREEL[]

  reactions PostReaction_PAGEREEL[]
}

/**
 * for user reel
 * reactions
 * comments
 * replies
 */

model PostReaction_PAGEREEL {
  id           String       @id @default(uuid())
  reelId       String
  reactionType ReactionType
  userId       String
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reel         Reel_PAGE    @relation(fields: [reelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaUrl     String
  content      String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Comment_PAGEREEL {
  id        String    @id @default(uuid())
  reelId    String
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reel      Reel_PAGE @relation(fields: [reelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaUrl  String
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  replies Reply_PAGEREEL[]

  reactions CommentReaction_PAGEREEL[]
}

/**
 * for a comment
 * reaction
 * reply
 */

model CommentReaction_PAGEREEL {
  id           String           @id @default(uuid())
  commentId    String
  reactionType ReactionType
  userId       String
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  comment      Comment_PAGEREEL @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model Reply_PAGEREEL {
  id           String                    @id @default(uuid())
  commentId    String
  reactionType ReactionType
  userId       String
  user         User                      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  comment      Comment_PAGEREEL          @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaUrl     String
  content      String
  reactions    ReplyReactions_PAGEREEL[]
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
}

//for a reply

model ReplyReactions_PAGEREEL {
  id           String         @id @default(uuid())
  replyId      String
  reactionType ReactionType
  userId       String
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reply        Reply_PAGEREEL @relation(fields: [replyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

//media

model Comment_USER_MEDIA {
  id        String                        @id @default(uuid())
  mediaId   String
  userId    String
  user      User                          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  media     Medias_USER                   @relation(fields: [mediaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaUrl  String
  content   String
  replies   Reply_USER_MEDIA[]
  reactions CommentReactions_USER_MEDIA[]
  createdAt DateTime                      @default(now())
  updatedAt DateTime                      @updatedAt
}

model Reply_USER_MEDIA {
  id        String             @id @default(uuid())
  commentId String
  comment   Comment_USER_MEDIA @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userId    String
  user      User                        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaUrl  String
  content   String
  reactions ReplyReactions_USER_MEDIA[]
  createdAt DateTime                    @default(now())
  updatedAt DateTime                    @updatedAt
}

model PostReactions_USER_MEDIA {
  id           String       @id @default(uuid())
  mediaId      String
  reactionType ReactionType
  userId       String
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  media        Medias_USER  @relation(fields: [mediaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model CommentReactions_USER_MEDIA {
  id           String             @id @default(uuid())
  commentId    String
  reactionType ReactionType
  userId       String
  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  comment      Comment_USER_MEDIA @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
}

model ReplyReactions_USER_MEDIA {
  id           String           @id @default(uuid())
  replyId      String
  reply        Reply_USER_MEDIA @relation(fields: [replyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reactionType ReactionType
  userId       String
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// page

model Comment_PAGE_MEDIA {
  id        String                        @id @default(uuid())
  mediaId   String
  userId    String
  user      User                          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  media     Medias_PAGE                   @relation(fields: [mediaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaUrl  String
  content   String
  replies   Reply_PAGE_MEDIA[]
  reactions CommentReactions_PAGE_MEDIA[]
  createdAt DateTime                      @default(now())
  updatedAt DateTime                      @updatedAt
}

model Reply_PAGE_MEDIA {
  id        String             @id @default(uuid())
  commentId String
  comment   Comment_PAGE_MEDIA @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userId    String
  user      User                        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaUrl  String
  content   String
  reactions ReplyReactions_PAGE_MEDIA[]
  createdAt DateTime                    @default(now())
  updatedAt DateTime                    @updatedAt
}

model PostReactions_PAGE_MEDIA {
  id           String       @id @default(uuid())
  mediaId      String
  reactionType ReactionType
  userId       String
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  media        Medias_PAGE  @relation(fields: [mediaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model CommentReactions_PAGE_MEDIA {
  id           String             @id @default(uuid())
  commentId    String
  reactionType ReactionType
  userId       String
  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  comment      Comment_PAGE_MEDIA @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
}

model ReplyReactions_PAGE_MEDIA {
  id           String           @id @default(uuid())
  replyId      String
  reply        Reply_PAGE_MEDIA @relation(fields: [replyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reactionType ReactionType
  userId       String
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// group

model Comment_GROUP_MEDIA {
  id        String                         @id @default(uuid())
  mediaId   String
  userId    String
  user      User                           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  media     Medias_GROUP                   @relation(fields: [mediaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaUrl  String
  content   String
  replies   Reply_GROUP_MEDIA[]
  reactions CommentReactions_GROUP_MEDIA[]
  createdAt DateTime                       @default(now())
  updatedAt DateTime                       @updatedAt
}

model Reply_GROUP_MEDIA {
  id        String              @id @default(uuid())
  commentId String
  comment   Comment_GROUP_MEDIA @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userId    String
  user      User                         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaUrl  String
  content   String
  reactions ReplyReactions_GROUP_MEDIA[]
  createdAt DateTime                     @default(now())
  updatedAt DateTime                     @updatedAt
}

model PostReactions_GROUP_MEDIA {
  id           String       @id @default(uuid())
  mediaId      String
  reactionType ReactionType
  userId       String
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  media        Medias_GROUP @relation(fields: [mediaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model CommentReactions_GROUP_MEDIA {
  id           String              @id @default(uuid())
  commentId    String
  reactionType ReactionType
  userId       String
  user         User                @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  comment      Comment_GROUP_MEDIA @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
}

model ReplyReactions_GROUP_MEDIA {
  id           String            @id @default(uuid())
  replyId      String
  reply        Reply_GROUP_MEDIA @relation(fields: [replyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reactionType ReactionType
  userId       String
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
